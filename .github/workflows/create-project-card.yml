name: Criar issue e adicionar ao Project v2

on:
  repository_dispatch:
    types: [create_card]

jobs:
  criar_issue:
    runs-on: ubuntu-latest
    steps:
      - name: Autenticar com GitHub App
        id: auth
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ steps.auth.outputs.token }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}
      - name: Criar issue e adicionar ao projeto
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          PROJECT_ID: PVT_kwHOA0czfM4A8xv2
          REPO_OWNER: LuamMaul
          REPO_NAME: bup2
          TICKET_ID: ${{ github.event.client_payload.ticket_id }}
          TICKET_SUBJECT: ${{ github.event.client_payload.ticket_subject }}
          PRIORITY_RAW: ${{ github.event.client_payload.priority }}
        run: |
          set -e

          # üîπ LIMPA PRIORIDADE
          PRIORITY=$(echo "$PRIORITY_RAW" | tr -d '"' | xargs)
          echo "üìå PRIORITY recebido e limpo: '$PRIORITY'"

          TITLE="$TICKET_ID - $TICKET_SUBJECT"
          TICKET_LINK="https://esusaps.freshdesk.com/helpdesk/tickets/$TICKET_ID"
          PLANILHA_LINK="https://docs.google.com/spreadsheets/d/1i_ceiljyTheYwYe5XJLmJn2uPJHy4kQVplLpbSDmWEs/edit?gid=1998271206#gid=1998271206"
          DESCRIPTION="[Ticket]($TICKET_LINK)\n\n[Planilha de M√©tricas]($PLANILHA_LINK)"
          TIPO_FIELD_ID="PVTSSF_lAHOA0czfM4A8xv2zgxJsvQ"
          TIPO_OPTION_ID="ffb9a1e9"

          echo "üîé Buscando ID do reposit√≥rio..."

          REPO_ID=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: bearer $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"query\": \"query { repository(owner: \\\"$REPO_OWNER\\\", name: \\\"$REPO_NAME\\\") { id } }\"}" | jq -r '.data.repository.id')

          echo "üì¶ REPO_ID: $REPO_ID"

          echo "üìù Criando a issue..."

          ISSUE_RESPONSE=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: bearer $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"query\": \"mutation { createIssue(input: {repositoryId: \\\"$REPO_ID\\\", title: \\\"$TITLE\\\", body: \\\"$DESCRIPTION\\\"}) { issue { id number url } } }\"}")

          echo "üì¨ Resposta da cria√ß√£o: $ISSUE_RESPONSE"

          ISSUE_ID=$(echo "$ISSUE_RESPONSE" | jq -r '.data.createIssue.issue.id')

          echo "üìé Adicionando issue ao projeto..."

          ADD_RESPONSE=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: bearer $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"query\": \"mutation { addProjectV2ItemById(input: {projectId: \\\"$PROJECT_ID\\\", contentId: \\\"$ISSUE_ID\\\"}) { item { id } } }\"}")

          ITEM_ID=$(echo "$ADD_RESPONSE" | jq -r '.data.addProjectV2ItemById.item.id')

          # ‚úÖ Define o Status como "Inbox" explicitamente
          STATUS_FIELD_ID="PVTSSF_lAHOA0czfM4A8xv2zgwrN38"
          STATUS_OPTION_ID="f75ad846"

          echo "üìÇ Definindo Status = Inbox..."

          MUTATION_STATUS=$(jq -n \
            --arg projectId "$PROJECT_ID" \
            --arg itemId "$ITEM_ID" \
            --arg fieldId "$STATUS_FIELD_ID" \
            --arg optionId "$STATUS_OPTION_ID" \
            '{ query: "mutation SetStatus($projectId:ID!,$itemId:ID!,$fieldId:ID!,$optionId:String!){ updateProjectV2ItemFieldValue(input:{ projectId:$projectId, itemId:$itemId, fieldId:$fieldId, value:{ singleSelectOptionId:$optionId }}){ projectV2Item{ id }}}", variables: { projectId: $projectId, itemId: $itemId, fieldId: $fieldId, optionId: $optionId } }')

          curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: bearer $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$MUTATION_STATUS"

          ITEM_ID=$(echo "$ADD_RESPONSE" | jq -r '.data.addProjectV2ItemById.item.id')

          echo "üéØ Interpretando prioridade..."

          # MAPA: PRIORITY textual (em ingl√™s) ‚Üí ID da op√ß√£o no campo do GitHub Project
          case "$PRIORITY" in
            "Low") PRIORITY_OPTION_ID="57621d1e" ;;     # Ajuste conforme seu campo real
            "Medium") PRIORITY_OPTION_ID="da944a9c" ;;
            "High") PRIORITY_OPTION_ID="0a877460" ;;
            "Urgent") PRIORITY_OPTION_ID="79628723" ;;
            *) PRIORITY_OPTION_ID="" ;;
          esac

          if [ -n "$PRIORITY_OPTION_ID" ]; then
            echo "üè∑Ô∏è Aplicando prioridade no card..."

            MUTATION=$(jq -n \
              --arg projectId "$PROJECT_ID" \
              --arg itemId "$ITEM_ID" \
              --arg fieldId "PVTSSF_lAHOA0czfM4A8xv2zgwrN40" \
              --arg optionId "$PRIORITY_OPTION_ID" \
              '{ query: "mutation UpdatePriority($projectId:ID!,$itemId:ID!,$fieldId:ID!,$optionId:String!){ updateProjectV2ItemFieldValue(input:{ projectId:$projectId, itemId:$itemId, fieldId:$fieldId, value:{ singleSelectOptionId:$optionId }}){ projectV2Item{ id }}}", variables: { projectId: $projectId, itemId: $itemId, fieldId: $fieldId, optionId: $optionId } }')

            curl -s -X POST https://api.github.com/graphql \
              -H "Authorization: bearer $GH_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$MUTATION"
          else
            echo "‚ö†Ô∏è PRIORITY '$PRIORITY' n√£o corresponde a nenhuma op√ß√£o conhecida."
          fi
          echo "üóÇÔ∏è Aplicando campo 'Tipo' = 'Ticket'..."

          MUTATION_TIPO=$(jq -n \
            --arg projectId "$PROJECT_ID" \
            --arg itemId "$ITEM_ID" \
            --arg fieldId "$TIPO_FIELD_ID" \
            --arg optionId "$TIPO_OPTION_ID" \
            '{ query: "mutation UpdateTipo($projectId:ID!,$itemId:ID!,$fieldId:ID!,$optionId:String!){ updateProjectV2ItemFieldValue(input:{ projectId:$projectId, itemId:$itemId, fieldId:$fieldId, value:{ singleSelectOptionId:$optionId }}){ projectV2Item{ id }}}", variables: { projectId: $projectId, itemId: $itemId, fieldId: $fieldId, optionId: $optionId } }')

          curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: bearer $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$MUTATION_TIPO"
